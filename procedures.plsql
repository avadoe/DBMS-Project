-- insert property records

CREATE OR REPLACE FUNCTION INSERTPROPERTYRECORD(
    PROPERTYID INT,
    OWNERID INT,
    AVAILABLEFROM DATE,
    AVAILABLETILL DATE,
    RENTPERMONTH NUMERIC(10, 2),
    ANNUALHIKEPERCENT NUMERIC(5, 2),
    TOTALAREA NUMERIC(10, 2),
    PLINTHAREA NUMERIC(10, 2),
    NBEDROOMS INT,
    NFLOORS INT,
    YEAROFCONSTRUCTION INT,
    LOCALITYID INT,
    OTHERFACILITIES TEXT
) RETURNS VOID AS
    $$  BEGIN INSERT INTO PROPERTY (
        PROPERTYID,
        OWNERID,
        AVAILABLEFROM,
        AVAILABLETILL,
        RENTPERMONTH,
        ANNUALHIKEPERCENT,
        TOTALAREA,
        PLINTHAREA,
        NBEDROOMS,
        NFLOORS,
        YEAROFCONSTRUCTION,
        LOCALITYID,
        OTHERFACILITIES
    ) VALUES (
        PROPERTYID,
        OWNERID,
        AVAILABLEFROM,
        AVAILABLETILL,
        RENTPERMONTH,
        ANNUALHIKEPERCENT,
        TOTALAREA,
        PLINTHAREA,
        NBEDROOMS,
        NFLOORS,
        YEAROFCONSTRUCTION,
        LOCALITYID,
        OTHERFACILITIES
    );
END;
$$  LANGUAGE PLPGSQL;

SELECT
    INSERTPROPERTYRECORD(5,
    2,
    '2022-01-01',
    '2022-12-31',
    1500.00,
    5.00,
    1000.00,
    800.00,
    3,
    2,
    2000,
    1,
    'Swimming Pool, Gym');

-- get property records


CREATE OR REPLACE PROCEDURE GETPROPERTYRECORDS(
    P_OWNER_ID INTEGER
) AS
    $$   DECLARE CUR_PROPERTIES CURSOR FOR
    SELECT
        *
    FROM
        PROPERTY
    WHERE
        OWNERID = P_OWNER_ID;
    PROP RECORD;
BEGIN
    OPEN CUR_PROPERTIES;
    LOOP
        FETCH CUR_PROPERTIES INTO PROP;
        EXIT WHEN NOT FOUND;
        RAISE NOTICE 'Property ID: %, Owner ID: %, Available From: %, Available Till: %, Rent per Month: %, Annual Hike Percent: %, Total Area: %, Plinth Area: %, Number of Bedrooms: %, Number of Floors: %, Year of Construction: %, Locality ID: %, Other Facilities: %', PROP.PROPERTYID, PROP.OWNERID, PROP.AVAILABLEFROM, PROP.AVAILABLETILL, PROP.RENTPERMONTH, PROP.ANNUALHIKEPERCENT, PROP.TOTALAREA, PROP.PLINTHAREA, PROP.NBEDROOMS, PROP.NFLOORS, PROP.YEAROFCONSTRUCTION, PROP.LOCALITYID, PROP.OTHERFACILITIES;
    END LOOP;
    CLOSE CUR_PROPERTIES;
END;
$$ LANGUAGE PLPGSQL;

CALL GETPROPERTYRECORDS(2);

-- get tenant details

CREATE OR REPLACE PROCEDURE GETTENANTDETAILS(
    P_PROPERTY_ID INTEGER
) AS
    $$ DECLARE V_TENANT "User"%ROWTYPE;
BEGIN
    SELECT
        "User".* INTO V_TENANT
    FROM
        "User"
        JOIN RENT
        ON "User".AADHARID = RENT.TENANTID JOIN PROPERTY
        ON PROPERTY.PROPERTYID = RENT.PROPERTYID
    WHERE
        PROPERTY.PROPERTYID = P_PROPERTY_ID;
    RAISE NOTICE 'Tenant Name: %,', V_TENANT.NAME;
END;
$$ LANGUAGE PLPGSQL;
$$  LANGUAGE PLPGSQL;

CALL GETTENANTDETAILS(1)

-- create new user

CREATE OR REPLACE PROCEDURE CREATENEWUSER(
    P_AADHARID INT,
    P_USERNAME VARCHAR(50),
    AGE INT,
    P_DOORNO VARCHAR(20),
    P_STREET VARCHAR(50),
    P_CITY VARCHAR(20),
    P_STATE VARCHAR(20),
    P_PINCODE INT,
    P_LOGIN VARCHAR(20),
    P_PASSWORD VARCHAR(20)
) AS
    $$  BEGIN INSERT INTO "User" (
        AADHARID,
        NAME,
        AGE,
        DOORNO,
        STREET,
        CITY,
        STATE,
        PINCODE,
        LOGINID,
        PASSWORD
    ) VALUES (
        P_AADHARID,
        P_USERNAME,
        AGE,
        P_DOORNO ,
        P_STREET ,
        P_CITY ,
        P_STATE ,
        P_PINCODE ,
        P_LOGIN ,
        P_PASSWORD 
    );
END;
$$  LANGUAGE PLPGSQL;

CALL CREATENEWUSER( 
    100000007, 'John Doe', 30, 'Flat 101', 'Example Street', 'Example City', 'Example State', 
    123456, 'johndoe@example.com', 'password');


-- rent history of a given property

CREATE OR REPLACE PROCEDURE GETRENTHISTORY(
    P_PROPERTY_ID INTEGER
) AS
    $$  BEGIN
    SELECT
        *
    FROM
        RENT
    WHERE
        PROPERTYID = P_PROPERTY_ID;
END;
$$  LANGUAGE PLPGSQL;

CALL GETRENTHISTORY(1)

CREATE OR REPLACE PROCEDURE GETRENTHISTORY(
    P_PROPERTY_ID INTEGER
) AS
    $$          DECLARE CUR_RENT CURSOR FOR
    SELECT
        *
    FROM
        RENT
    WHERE
        PROPERTYID = P_PROPERTY_ID;
    RENT_RECORD RECORD;
BEGIN
    OPEN CUR_RENT;
    LOOP
        FETCH CUR_RENT INTO RENT_RECORD;
        EXIT WHEN NOT FOUND;
        RAISE NOTICE 'Rent ID: %, Property ID: %, Tenant ID: %, Start Date: %, End Date: %, Monthly Rent: %, Yearly Hike Percent: %, Agency Commission: %, Other Details: %', RENT_RECORD.RENTID, RENT_RECORD.PROPERTYID, RENT_RECORD.TENANTID, RENT_RECORD.STARTDATE, RENT_RECORD.ENDDATE, RENT_RECORD.MONTHLYRENT, RENT_RECORD.YEARLYHIKEPERCENT, RENT_RECORD.AGENCYCOMMISSION, RENT_RECORD.OTHERDETAILS;
    END LOOP;
    CLOSE CUR_RENT;
END;
$$ LANGUAGE PLPGSQL;